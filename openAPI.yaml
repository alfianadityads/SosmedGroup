openapi: 3.0.3
info:
  title: Sosmed Apps
  description: This is API for Group Project By Alterra Academy
  version: "1.0.0"
  contact:
    email: alfianadityadwi@gmail.com
  license:
    name: Apache 2.0
    url: "http://www.apache.org/licenses/LICENSE-2.0.html"
tags:
  - name: register
    description: Endpoint for user registration
  - name: login
    description: Endpoint for verifying who a user is
  - name: logout
  - name: users
    description: Endpoint for perform operations on user
  - name: content
    description: Endpoint to perform operations on user posts
  - name: comment
    description: Endpoint to perform operations on comment
servers:
  - url: link will be updated soon
    description: primarry link

paths:
  /register:
    post:
      tags:
        - register
      description: feature for user registration
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                username:
                  type: string
                email:
                  type: string
                  format: email
                password:
                  type: string
                  format: password
            example:
              name: Alfian
              username: alfianad11
              email: alfianadityadwi@gmail.com
              password: alfian1234
      responses:
        201: 
          description: "success insert data"
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
              example:
                message: "success add data"
        400:
          $ref: '#/components/responses/400'
        500:
          $ref: '#/components/responses/500'

  /login:
    post:
      tags:
        - "login"
      description: feature for verifying who a user is
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                  format: email
                password:
                  type: string
                  format: password

      responses:
        200:
          description: success login
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/responseObject'
              example:
                data: 
                  id: 1
                  email: "emailex@example.com"
                  token: "632n87129n1"
                message: "login success"
        400:
          $ref: '#/components/responses/400'
        500:
          $ref: '#/components/responses/500'
    
  /users:
    put:
      tags:
        - users
      summary: update data user
      description: Update data for user 
      security:
        - JWTAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              example:
                name: fauzi 
                date_of_birth: "1996-01-15"
                email: fauzilax@gmail.com
                password: "secretpass"
      responses:
        201:
          description: update success
          content:
            application/json:
              schema:
                type: object
              example:
                status: "success"
                message: "update data success"
        400:
          $ref: '#/components/responses/400'
        500:
          $ref: '#/components/responses/500'

    delete:
      tags:
        - users
      summary: delete data user
      description: delete data from user
      security:
        - JWTAuth: []
      responses:
        200:
          description: deleted user success
          content:
            application/json:
              schema:
                type: object
                example:
                  status: "success"
                  message: "delete data user success"
        400:
          $ref: '#/components/responses/400'
        500:
          $ref: '#/components/responses/500'

  /contents:
    post:
      tags:
        - content
      summary: add content to user
      description: adding content post to user
      security:
        - JWTAuth: []
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                content:
                  type: string
                image:
                  type: string
                  format: binary
                
      responses:
        201:
          description: success create content
          content:
            application/json:
              schema:
                type: object
                example: 
                  respon data:
                    description: "success create content"
                    value :
                      {
                      id_content: 1,
                      content: "This morning I make good scramble egg for breakfast. Yumm!",
                      image: "https://sosmedgroup2.s3.amazonaws.com/2023-01-16%2006%3A40%3A47.jpg",
                      create_at: "2023-01-16 13:56:42.368",
                        user:
                          {
                          id_user: 2,
                          username: fatmakima
                          }
                      }
        400:
          $ref: '#/components/responses/400'
        500:
          $ref: '#/components/responses/500'

  /contents/{id_content}:
    put:
      tags:
        - content
      summary: edit content from post
      description: edit content from user post
      security:
        - JWTAuth: []
      parameters:
        - name: id_content
          description: id content
          required: true
          in: path
          schema:
            description: id content
            type: integer
            example: 1
      requestBody:
        required: true
        content: 
          multipart/form-data:
            schema:
              type: object
              properties:
                content:
                  type: string
                image:
                  type: string
                  format: binary
      responses:
        200:
          description: update content success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/responseObject'
              example:
                respon data:
                    description: "success create content"
                    value :
                      {
                      id_content: 1,
                      content: "Today is beautiful day. Amazing!",
                      image: "https://sosmedgroup2.s3.amazonaws.com/2023-01-16%2006%3A40%3A47.jpg",
                      create_at: "2023-01-16 13:56:42.368",
                      update_at: "2023-01-16 14:15:42.368",
                        user:
                          {
                          id_user: 2,
                          username: fatmakima
                          }
                      }
        400:
          $ref: '#/components/responses/400'
        500:
          $ref: '#/components/responses/500'

    delete:
      tags:
        - content
      summary: delete user content
      description: deleting content from user post
      security:
        - JWTAuth: []
      parameters:
        - name: id_content
          description: id content
          required: true
          in: path
          schema:
            description: id content
            type: integer
            example: 1
      responses:
        200:
          description: success delete post
          content:
            application/json:
              schema:
                type: object
                example:
                  status: "success"
                  message: "success delete content from user post"
        400:
          $ref: '#/components/responses/400'
        500:
          $ref: '#/components/responses/500'

    get:
      tags:
        - content
      summary: show detail content
      description: show detail data content
      parameters:
        - name: id_content
          description: "id content"
          required: true
          in: path
          schema:
            description: "id content"
            type: integer
            example: 1
      responses:
        200:
          description: success show detail content
          content:
            application/json:
              schema:
                type: object
                example:
                  respon data:
                    description: "success show detail content"
                    value :
                      {
                      id_content: 1,
                      content: "This morning I make good scramble egg for breakfast. Yumm!",
                      image: "https://sosmedgroup2.s3.amazonaws.com/2023-01-16%2006%3A40%3A47.jpg",
                      create_at: "2023-01-16 13:56:42.368",
                      update_at: "2023-01-16 14:15:42.368",
                        user:
                          {
                          id_user: 2,
                          username: fatmakima
                          }
                      }
        400:
          $ref: '#/components/responses/400'
        500:
          $ref: '#/components/responses/500'

  /comment/{id_content}:
    post:
      tags:
        - comment
      summary: add comment to user content by id content
      description: adding comment to content based on id content
      security:
        - JWTAuth: []
      parameters:
        - name: id_content
          description: "id content"
          required: true
          in: path
          schema:
            description: "id content"
            type: integer
            example: 1
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              example: 1
      responses:
        201: 
          description: "succes create comment"
          content:
            application/json:
              schema:
                type: object
                example:
                  response data:
                    description: "succes create comment"
                    value:
                      {
                      id_content: 2,
                      username: "hannah7381",
                      comment: "Hello Hannah, your dress is beautiful today.",
                      create_at: "2023-01-16 14:26:42.368"
                      }
        400:
          $ref: '#/components/responses/400'
        500:
          $ref: '#/components/responses/500'

    get:
      tags:
        - content
      summary: show all contents
      description: "showing all contents"
      responses:
        200:
          description: success show detail content
          content:
            application/json:
              schema:
                type: object
                example:
                  respon data:
                    description: "success show detail content"
                    value :
                      {
                      id_content: 1,
                      content: "This morning I make good scramble egg for breakfast. Yumm!",
                      image: "https://sosmedgroup2.s3.amazonaws.com/2023-01-16%2006%3A40%3A47.jpg",
                      create_at: "2023-01-16 13:56:42.368",
                      update_at: "2023-01-16 14:15:42.368",
                        user:
                          {
                          id_user: 2,
                          username: fatmakima
                          }
                      }
        400:
          $ref: '#/components/responses/400'
        500:
          $ref: '#/components/responses/500'

  /delete/{id_comment}:
    delete:
      tags:
        - comment
      summary: delete comment user content based id content
      description: "deleting comment user content based id content"
      security: 
        - JWTAuth: []
      parameters:
        - name: id_comment
          description: "id_comment"
          required: true
          in: path
          schema:
            description: "id_comment"
            type: integer
            example: 1
      responses:
        200:
          description: "success delete comment"
          content: 
            application/json:
              schema:
                type: object
                example:
                  status: "success"
                  message: "delete comment success"
        400:
          $ref: '#/components/responses/400'
        500:
          $ref: '#/components/responses/500'

components:
  securitySchemes:
    JWTAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
      description: "user token"
  schemas:
    user:
      type: object
      properties:
        id: 
          type: integer
          format: int64
        name:
          type: string
        email:
          type: string
        password:
          type: string
    content:
      type: object
      properties:
        id:
          type: integer
          format: int64
        id_user:
          type: integer
          format: int64
        id_image:
          type: string
        content:
          type: string
    comment:
      type: object
      properties:
        id:
          type: integer
          format: int64
        id_user:
          type: integer
          format: int64
        comment:
          type: string

    responseObject:
      type: object
      properties:
        data:
          type: object
        message:
          type: string
    responseObjectArr:
      type: object
      properties:
        data:
          type: array
          items:
            type: object
        message:
          type: string
  responses:
    400:
      description: "error from user side"
      content:
        application/json:
          schema:
            type: object
            properties:
              message:
                type: string
          example:
            status: "failed"
            message: "data not found"
    500:
      description: "error from server"
      content:
        application/json:
          schema:
            type: object
            properties:
              message:
                type: string
          example:
            message: "data cannot prosses"
